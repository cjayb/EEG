########
#
# This code generates figure S3 in Eyal et al 2017
# It summaries the properties of the 100 models found in Eyal et al 
# for the AMPA+NMDA synapses in human L2/L3 PCs.
# The script here reads models_num_syn_vs_v.txt that can be generated by running run_best_100_models.py
# and creates the figures of S3.
#
# AUTHOR: Guy Eyal, the Hebrew University
# CONTACT: guy.eyal@mail.huji.ac.il
#
########

import numpy as np
import matplotlib.pyplot as plt
import pandas as pnd
import matplotlib
import pickle
import math

MODEL_IX = 15796 

READ_FROM_PICKLE = 1


# The top 100 models are saved in two formats, pickle and CSV. 
# The former is much easier, but if you don't have pickle change READ_FROM_PICKLE to 0
def read_csv():
    f = open("../Figure4/best_100_models.txt")
    lines = f.readlines()
    f.close()
    models = {}

    for line in lines[1:]:
        
        L = line.strip().split('"')
        model = {}
        model['model'] = int(L[0].split(",")[1])
        model['number_of_synapses'] = int(L[0].split(",")[2])
        model['NMDA_W'] = float(L[0].split(",")[3])
        model['tau_1_NMDA'] = float(L[0].split(",")[4])
        model['tau_2_NMDA'] = float(L[0].split(",")[5])
        model['N_NMDA'] = float(L[0].split(",")[6])
        model['GAMMA_NMDA'] = float(L[0].split(",")[7])
        model['AMPA_W'] = float(L[0].split(",")[8])
        model['DELAY'] = float(L[0].split(",")[9])
        model['rmsd_epsp'] = float(L[0].split(",")[10])
        model['AMPA_W_B'] = float(L[0].split(",")[11])
        model['DELAY_B'] = float(L[0].split(",")[12])
        model['rmsd_block'] = float(L[0].split(",")[13])
        model['syns_secs'] = [int(s) for s in L[1][1:-1].split(",")]
        model['syns_segs'] = [float(s) for s in L[3][1:-1].split(",")]

        models[model['model']] = model

    return models

if READ_FROM_PICKLE:
    models_df = pnd.read_pickle('../Figure4/best_100_models.p')
    d = models_df.to_dict(orient='list')
    models = {}
    for ix,model in enumerate(d['model']):
        models[model] = {}
        for k in d:
            models[model][k] = d[k][ix]


else:
    models = read_csv()

GAMMA_VALS = np.array([models[model]['GAMMA_NMDA'] for model in models])
min_GAMMA = np.min(GAMMA_VALS) 
max_GAMMA = np.max(GAMMA_VALS)


def norm_gamma(gamma):
    return (gamma-min_GAMMA)/(max_GAMMA-min_GAMMA)

# Mg block from Jahr and Stevens 1990
def peak_condictance(v,gamma_NMDA,n_NMDA):
    return 1.0/(1 + math.exp(gamma_NMDA* -(v))* n_NMDA)


# The result of running run_best_100_models.py, where for each for one of the 100 models,
# distributes 1-50 synapses on a basal dendrite of cell 130305 
# and measures the peak voltage as function of the number of synapses
def read_num_syn_for_v(filename = 'models_num_syn_vs_v.txt'):
    with open(filename) as f:
        lines = f.readlines()
    model_v_for_num_syn = {}
    for line in lines[1:]:
        L = line.strip().split(",")
        V = [float(v) for v in L[1:]]
        model_v_for_num_syn[int(L[0])] = V
    return model_v_for_num_syn


plt.figure(1)
for model_ix,model in models.items():
    norm_gamma_model = norm_gamma(model['GAMMA_NMDA'])
    
    if model_ix == MODEL_IX:
        plt.plot(model['GAMMA_NMDA'],model['NMDA_W']*1000, c ='r', marker='.', ms=10)
    else:
        plt.plot(model['GAMMA_NMDA'],model['NMDA_W']*1000,
            c = [1 - norm_gamma_model,1,norm_gamma_model], marker='.')

plt.tick_params(direction = 'in')
plt.xlim(0.06,0.085)
plt.ylim(0.6,2)


plt.figure(2)
for model_ix,model in models.items():
    norm_gamma_model = norm_gamma(model['GAMMA_NMDA'])
    V = [peak_condictance(v,model['GAMMA_NMDA'],model['N_NMDA']) for v in range(-100,70)]
    plt.plot(range(-100,70),V ,c = [1 - norm_gamma_model,1,norm_gamma_model])

model = models[MODEL_IX]
V = [peak_condictance(v,model['GAMMA_NMDA'],model['N_NMDA']) for v in range(-100,70)]
plt.plot(range(-100,70),V ,c = 'r', lw=3)

plt.tick_params(direction = 'in')
plt.xlim(-100,70)
plt.ylim(0,1)

plt.figure(3)
model_v_for_num_syn = read_num_syn_for_v()
for model,v in model_v_for_num_syn.items():
    norm_gamma_model = norm_gamma(models[model]['GAMMA_NMDA'])
    plt.plot(range(1,51),v,c = [1 - norm_gamma_model,1,norm_gamma_model])

plt.plot(range(1,51),model_v_for_num_syn[MODEL_IX] ,c = 'r', lw=3)

plt.tick_params(direction = 'in')
plt.xlim(0,50)
plt.ylim(0,8)











